#!/bin/bash
#==============================================================================
# R.A.L.F. (Recover A Lost File)
# Syntax: $0 <filename>
#------------------------------------------------------------------------------
# Ralf is just a shell script that automates the manual steps required to
# restore a (accidentally) deleted file from a modern ext2/ext3 file system.
# For other *nix file systems there may be easier solutions - though Rolf
# should also be able to handle them, as long as they work with iNodes.
#------------------------------------------------------------------------------
# Requires: photorec OR foremost
# Requires: sleuthkit (at least fsstat, dls and fls from that package)
#==============================================================================

#==========================================================[ Configuration ]===
#-------------------------------------------------[ File Systems and Paths ]---
# We don't save anything in the TMPDIR - we just need a place where to create
# named pipes
TMPDIR=/tmp
# Some named pipes for IPC
MNTFILE=${TMPDIR}/undel_FIFO
TMP=$TMPDIR/undel_FIFO2$$
# directory name to recover to. Name is used relative to the target file systems
# mount point - so no leading slash here (and no trailing slash either)!
RESTDIR=recover

#-------------------------------------------------------[ foremost options ]---
# Though we prefer to use PhotoRec, foremost is used as a fallback solution
# if the PhotoRec executable cannot be found:
FILESPEC="all"
USETS=0
USEQUICK=1
USEQUIET=1
READONLY=0
VERBOSE=1
ALLHEAD=1

# photorec is prefered over foremost - if found:
RECOPROG=photorec

#===================================================[ Helper / SubRoutines ]===
shopt -s extglob
trap "cleanUp ; exit 2" 2 3 15
#-----------------------------------[ Check whether we are running as root ]---
function checkRoot() {
  local uid=`id -u`
  [ $uid -gt 0 ] && {
    echo "This script must be run as root (or at least with sudo)."
    exit 1
  }
}

#-------------------------------[ Make sure needed binaries exist in $PATH ]---
function checkBins() {
  local fm=1
  [ "$RECOPROG" = "photorec" -a -z "`which photorec`" ] && RECOPROG=foremost
  [ "$RECOPROG" = "foremost" -a -z "`which foremost`" ] && {
    echo
    echo "Neither the 'photorec' nor the 'foremost' executable could be found"
    echo "in your \$PATH - but we need one of them. They usually ship in a"
    echo "package with the same name (i.e. 'photorec' or 'foremost')."
    echo
    fm=0
  }
  [ -z "`which fls`" ] && {
    echo
    echo "Could not find the 'fls' executable in your \$PATH. This is part of the"
    echo "sleuthkit package."
    echo
    fm=0
  }
  [ -z "`which fsstat`" ] && {
    echo
    echo "Could not find the 'fsstat' executable in your \$PATH. This is part of the"
    echo "sleuthkit package."
    echo
    fm=0
  }
  [ -z "`which dls`" ] && {
    echo
    echo "Could not find the 'dls' executable in your \$PATH. This is part of the"
    echo "sleuthkit package."
    echo
    fm=0
  }
  [ $fm -ne 1 ] && {
    echo
    echo "One or more of the essential tools required to recover your file cannot"
    echo "be found. Please make sure you have them installed, and they can be found"
    echo "in your \$PATH."
    echo
    exit 2
  }
}

#--------------------------------------------------[ Display help and exit ]---
function syntax() {
  echo
  echo "Syntax:"
  echo "  $0 <filename>"
  echo "where <filename> specifies the name of the file to restore - either"
  echo "relative to the current working directory, or with full (absolute) path."
  echo
  exit 0
}

#-------------------------------------------[ Select Destination directory ]---
function selDest() {
  local rd
  echo
  echo "Please select the file system to store the recovered files to."
  echo "(This must be on a different device than you restore from)"
  echo
  printf "%2s| %-7s| %-15s| %-32s| %-16s\n" "ID" "Type" "Device" "MountPoint" "Size"
  echo "--+--------+----------------+---------------------------------+----------------"
  typeset -i i=0
  mkfifo $MNTFILE
  df -h -l -T >$MNTFILE &
  while read line; do
    if [[ "$line" == /dev* ]]; then # skip pseudo filesystems
      i+=1
      devs[$i]=`echo $line|awk '{print $1}'`
      [ ${devs[$i]} != $DEV ] && echo "$i $line"|awk '{printf "%2d| %-7s| %-15s| %-32s| %-16s\n", $1, $3, $2, $8, $4 }'
      stores[$i]=`echo $line|awk '{print $7}'`
    fi
  done<$MNTFILE
  rm -f $MNTFILE
  read -p "Destination ID: " rd
  if [ "${devs[$rd]}" = "$DEV" ]; then
    echo
    echo "Invalid selection: Source and Target file systems must not be identical!"
    echo "This way you may destroy your lost data permanently. Are you sure to"
    read -n 1 -p "proceed (y/n)? " ready
    echo
    ready=`echo $ready|tr [:upper:] [:lower:]`
    if [ "$ready" = "y" -o "$ready" = "j" ]; then
      recoTo=${stores[$rd]}/$RESTDIR
    else
      echo -e "\nAborting on user request."
      cleanUp
      exit 0
    fi
  else
    STORETO=${stores[$rd]}
  fi
  echo
}

#--------------------------------------------------------[ Output progress ]---
function li1() {
  echo "* $1"
}

#--------------------------------------------------------[ Verify filename ]---
function fileName() {
  if [[ "$1" == /* ]]; then
    uFILE=$1
  else
    uFILE="`pwd`/$1"
  fi
  li1 "FileName set to '$uFILE'"
}

#-----------------------------------------------[ Select Source MountPoint ]---
function selSrc() {
  local mid
  typeset -i i=0
  mounts[0]=""
  mkfifo $MNTFILE
  mkfifo $TMP
  df -h -l -T >$MNTFILE &
  while read line; do
    if [[ "$line" == /dev* ]]; then # skip pseudo filesystems
      echo $line|awk '{print $7}'>>$TMP &
      uDEV[$i]=`echo $line|awk '{print $1}'`
      uMOUNT[$i]=`echo $line|awk '{print $7}'`
      uFSTYPE[$i]=`echo $line|awk '{print $2}'`
      i+=1
    fi
  done<$MNTFILE
  sort -n -r <$TMP>$MNTFILE &
  while read line; do
    if [[ "$uFILE" == $line/* ]]; then
      i=0
      while (( i < ${#uMOUNT[*]} )); do
        if [[ "$line" = "${uMOUNT[$i]}" ]]; then
          li1 "Selected file should be on device ${uDEV[$i]}, mounted to ${uMOUNT[$i]} (${uFSTYPE[$i]})."
	  DEV=${uDEV[$i]}
	  MNT=${uMOUNT[$i]}
	  FSTYPE=${uFSTYPE[$i]}
	  break 2
        fi
        i+=1
      done
    fi
  done <$MNTFILE
  rm -f $TMP
  rm -f $MNTFILE
}

#--------------------------------------------[ Splitup filename for search ]---
function splitFileName() {
  SEARCH=${uFILE#$MNT/*}
  li1 "Setting SearchString relative to mountpoint ('$SEARCH')"
}

#--------------------------------------------------[ Restore with PhotoRec ]---
function recoPhotoRec() {
  li1 "Extracting file with PhotoRec..."
  cmd="photorec /d ${STORETO}/${RESTDIR} /cmd $DUMPFILE partition_i386"
  [ "$FSTYPE" = "ext3" -o "$FSTYPE" = "ext2" ] && cmd="${cmd},options,mode_ext2"
  cmd="${cmd},fileopt,all,enable,search"
  li1 "Executing '$cmd'"
  eval $cmd
  rc=$?
}

#--------------------------------------------------[ Restore with foremost ]---
function recoForemost() {
  li1 "Extracting file with foremost..."
  cmd="foremost "
  [ $USEQUICK -eq 1 ] && cmd="$cmd -q"
  [ $USETS -eq 1 ] && cmd="$cmd -T"
  [ $USEQUIET -eq 1 ] && cmd="$cmd -Q"
  [ $READONLY -eq 1 ] && cmd="$cmd -w"
  [ $VERBOSE -eq 1 ] && cmd="$cmd -v"
  [ $ALLHEAD -eq 1 ] && cmd="$cmd -a"
  cmd="$cmd -t $FILESPEC -o ${STORETO}/$RESTDIR ${DUMPFILE} >/dev/null"
  li1 "Executing '$cmd'"
  eval $cmd
  rc=$?
}

#------------------------------------------------[ Restore a file (or not) ]---
# $1: filename (relative to mountpoint)
# $2: iNode#
function fileRestore() {
  echo
  echo "Found file '$MNT/$1' on iNode '$2'."
  read -n 1 -p "Restore (y/n)? " ready
  echo
  ready=`echo $ready|tr [:upper:] [:lower:]`
  if [ "$ready" = "y" -o "$ready" = "j" ]; then
    mkfifo $TMP
    fsstat $DEV > $TMP &
    typeset -i min
    typeset -i max
    typeset -i nod=$2
    local range=0
    local start=0
    while read line; do
      if [ $start -eq 0 ]; then
        [[ "$line" == Group:* ]] && start=1
      else
        if [[ "$line" == Inode?Range:* ]]; then
          min=`echo $line|awk '{print $3}'`
	  max=`echo $line|awk '{print $5}'`
	  if [ $nod -gt $min -a $nod -lt $max ]; then
	    li1 "iNode $2 found in range '$min - $max'"
	    range=1
	    continue
	  fi
        elif [ $range -eq 1 ]; then
          if [[ "$line" == Block?Range:* ]]; then
            min=`echo $line|awk '{print $3}'`
            max=`echo $line|awk '{print $5}'`
	    li1 "Creating image of matching block range ($min - $max)"
	    dls $DEV $min-$max >${DUMPFILE}
	    case "$RECOPROG" in
	      "photorec") recoPhotoRec;;
	      "foremost") recoForemost;;
	      *) echo "Ooops - no recovery tool specified???"
	         echo "You normally should not see this message - there seems to be some bug in the script..."
		 ;;
	    esac
	    if [ $rc -eq 0 ]; then
	      echo
	      echo "Your file has been successfully recovered to the following location:"
	      echo "  ${STORETO}/$RESTDIR"
	      echo "You still have to rename it and place it where you want it to be..."
	    else
	      echo "Ooops! It looks like $RECOPROG failed to recover your file. So we will"
	      echo "exit as well now..."
	      cleanUp
	      exit $rc
	    fi
	    break
	  fi
        fi
      fi
    done<$TMP
    [ $range -eq 0 ] && li1 "Sorry - looks like we could not recover anything..."
  else
    echo "No Restore."
  fi
}

function cleanUp() {
  rm -f $TMP $MNTFILE $DUMPFILE
  echo
}

#============================================================[ Do the job! ]===
checkRoot
checkBins
[ -z "$1" ] && syntax
case "$1" in
  "-h"|"--help"|"-?") syntax;;
  *) fileName $1
  ;;
esac
selSrc
selDest
if [ -n "$STORETO" ]; then
  DUMPFILE=${STORETO}/dump.$$
else
  echo
  echo "Sorry - something went wrong, we do not have a destination to store to."
  echo
  cleanUp
  exit 2
fi
splitFileName
li1 "Searching for iNode"
mkfifo $TMP
#echo "fls -r -d $DEV|grep -v '(realloc)'|grep 'r/r'|grep '$SEARCH'"
fls -r -d $DEV|grep -v "(realloc)"|grep "r/r"|grep "$SEARCH">$TMP &
typeset -i i=0
while read line; do
  iNODE[$i]=`echo "'$line'"|awk '{print $3}'`
  iNODE[$i]=${iNODE%*:}
  iFILE[$i]=`echo "'$line '"|awk '{print $4}'`
  i+=1
done <$TMP
rm -f $TMP
i=0
while (( i < ${#iNODE[*]} )); do
  fileRestore ${iFILE[$i]} ${iNODE[$i]}
  i+=1
done
cleanUp
exit 0
